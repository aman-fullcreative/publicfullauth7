name: TruffleHog Maximum-Coverage with Summary

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    - cron: '0 2 * * 1'

permissions:
  contents: read
  pull-requests: write
  security-events: write

jobs:
  trufflehog-max:
    name: TruffleHog Full Scan with Summary
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true

    - name: TruffleHog Maximum Coverage Scan
      id: trufflehog
      uses: trufflesecurity/trufflehog@main
      continue-on-error: true
      with:
        base: ""  # Full repository scan
        head: ""  # Full repository scan
        extra_args: >-
          --json
          --include-detectors=all
          --no-verification
          --results=verified,unknown,unverified,filtered_unverified
          --archive-max-size=500MB
          --archive-max-depth=20
          --archive-timeout=10m
          --concurrency=8
          --debug
          --no-update

    - name: Parse TruffleHog Results and Generate Summary
      id: parse_results
      if: always()
      shell: bash
      run: |
        echo "🔍 TruffleHog Maximum Coverage Results" >> "$GITHUB_STEP_SUMMARY"
        echo "======================================" >> "$GITHUB_STEP_SUMMARY"
        
        # Initialize variables with defaults
        total_count=0
        jdbc_count=0
        docker_count=0
        privatekey_count=0
        redis_count=0
        other_count=0
        verified_count=0
        unverified_count=0
        
        # Check if results file exists and has content
        if [[ -f "trufflehog_results.json" && -s "trufflehog_results.json" ]]; then
          echo "DEBUG: Found results file with content" >&2
          
          # Count total findings with error handling
          total_count=$(jq 'length' trufflehog_results.json 2>/dev/null || echo "0")
          
          if [[ $total_count -gt 0 ]]; then
            # Count by detector type
            jdbc_count=$(jq '[.[] | select(.DetectorName=="JDBC")] | length' trufflehog_results.json 2>/dev/null || echo "0")
            docker_count=$(jq '[.[] | select(.DetectorName=="Docker")] | length' trufflehog_results.json 2>/dev/null || echo "0")
            privatekey_count=$(jq '[.[] | select(.DetectorName=="PrivateKey")] | length' trufflehog_results.json 2>/dev/null || echo "0")
            redis_count=$(jq '[.[] | select(.DetectorName=="Redis")] | length' trufflehog_results.json 2>/dev/null || echo "0")
            other_count=$((total_count - jdbc_count - docker_count - privatekey_count - redis_count))
            
            # Count verified vs unverified
            verified_count=$(jq '[.[] | select(.Verified==true)] | length' trufflehog_results.json 2>/dev/null || echo "0")
            unverified_count=$(jq '[.[] | select(.Verified==false)] | length' trufflehog_results.json 2>/dev/null || echo "0")
          fi
          
          echo "DEBUG: Counts - Total: $total_count, JDBC: $jdbc_count, Docker: $docker_count, PrivateKey: $privatekey_count, Redis: $redis_count" >&2
        else
          echo "DEBUG: No results file found or file is empty" >&2
        fi
        
        # Generate summary
        echo "📊 **TOTAL SECRETS FOUND: $total_count**" >> "$GITHUB_STEP_SUMMARY"
        echo "" >> "$GITHUB_STEP_SUMMARY"
        
        if [[ $total_count -gt 0 ]]; then
          echo "### 🎯 Breakdown by Secret Type:" >> "$GITHUB_STEP_SUMMARY"
          echo "| Secret Type | Count | Description |" >> "$GITHUB_STEP_SUMMARY"
          echo "|-------------|-------|-------------|" >> "$GITHUB_STEP_SUMMARY"
          echo "| 🔑 Private Key | $privatekey_count | RSA/EC certificates and keys |" >> "$GITHUB_STEP_SUMMARY"
          echo "| 🗄️ JDBC | $jdbc_count | Database connection strings |" >> "$GITHUB_STEP_SUMMARY"
          echo "| 🐳 Docker | $docker_count | Registry authentication |" >> "$GITHUB_STEP_SUMMARY"
          echo "| 📊 Redis | $redis_count | Cache connection strings |" >> "$GITHUB_STEP_SUMMARY"
          if [[ $other_count -gt 0 ]]; then
            echo "| 🔧 Other | $other_count | Additional secret types |" >> "$GITHUB_STEP_SUMMARY"
          fi
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "### ✅ Verification Status:" >> "$GITHUB_STEP_SUMMARY"
          echo "- **Verified Secrets**: $verified_count" >> "$GITHUB_STEP_SUMMARY"
          echo "- **Unverified Secrets**: $unverified_count" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          
          # Top files with secrets (only if results exist)
          if [[ -f "trufflehog_results.json" && -s "trufflehog_results.json" ]]; then
            echo "### 📁 Top 10 Files with Secrets:" >> "$GITHUB_STEP_SUMMARY"
            jq -r '.[] | .SourceMetadata.Data.Git.file + ":" + (.SourceMetadata.Data.Git.line | tostring) + " (" + .DetectorName + ")"' trufflehog_results.json 2>/dev/null | sort | uniq -c | sort -nr | head -10 | while read -r count file; do
              echo "- **$count secrets**: \`$file\`" >> "$GITHUB_STEP_SUMMARY"
            done
          fi
          
          # Set outputs
          echo "total_findings=$total_count" >> "$GITHUB_OUTPUT"
          echo "secrets_found=true" >> "$GITHUB_OUTPUT"
        else
          echo "✅ **No secrets detected in this scan.**" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "- Scan completed successfully with no findings" >> "$GITHUB_STEP_SUMMARY"
          echo "- All detectors were enabled for maximum coverage" >> "$GITHUB_STEP_SUMMARY"
          
          echo "total_findings=0" >> "$GITHUB_OUTPUT" 
          echo "secrets_found=false" >> "$GITHUB_OUTPUT"
        fi

    - name: Upload TruffleHog Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: trufflehog-max-results-with-summary
        path: |
          trufflehog_results.json
        retention-days: 30

    - name: Comment on PR with Secret Summary
      if: ${{ always() && github.event_name == 'pull_request' }}
      uses: actions/github-script@v7
      env:
        TOTAL_FINDINGS: ${{ steps.parse_results.outputs.total_findings }}
        SECRETS_FOUND: ${{ steps.parse_results.outputs.secrets_found }}
      with:
        script: |
          const totalFindings = process.env.TOTAL_FINDINGS || '0';
          const secretsFound = process.env.SECRETS_FOUND === 'true';
          
          let commentBody;
          
          if (secretsFound && parseInt(totalFindings) > 0) {
            commentBody = `## 🔍 TruffleHog Secret Scan Results
            
**Total Secrets Detected: ${totalFindings}**

⚠️ **Action Required**: Secrets were detected in this PR.

📋 **Next Steps:**
1. Download the detailed report from the Actions artifacts
2. Review each detected secret for accuracy  
3. Remove/rotate any real credentials immediately
4. Update exclusion patterns for false positives
5. Push fixes to this branch

> 💡 **Note**: This scan uses maximum coverage settings and may include test fixtures. Review carefully to distinguish between real secrets and test data.`;
          } else {
            commentBody = `## 🔍 TruffleHog Secret Scan Results

✅ **No secrets detected in this PR**

The TruffleHog maximum coverage scan completed successfully with no findings.

- All ${totalFindings || '800+'} detectors were enabled
- Full repository history was scanned
- No verification filtering was applied

This PR is clear for merge from a secrets perspective.`;
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: commentBody
          });
