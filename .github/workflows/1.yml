# TruffleHog Maximum Coverage - Full Repository Scan
# This workflow forces TruffleHog to scan like Gitleaks with maximum detection coverage

name: TruffleHog Maximum Coverage Scan

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:  # Manual trigger
  schedule:
    - cron: '0 2 * * 1'  # Weekly full scan

permissions:
  contents: read
  pull-requests: write

jobs:
  trufflehog-max-coverage:
    runs-on: ubuntu-latest
    name: TruffleHog Maximum Coverage
    timeout-minutes: 45
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # CRITICAL: Full history like Gitleaks
        
    - name: TruffleHog MAX scan
      id: trufflehog
      uses: trufflesecurity/trufflehog@main
      continue-on-error: true          # **never fails the job**
      with:
        # Empty base/head = scan the entire repo history
        base: ""                       # full scan
        head: ""                       # full scan
        # Extra CLI flags for _absolute_ coverage
        extra_args: >-
          --json
          --include-detectors=all
          --no-verification
          --results=verified,unknown,unverified,filtered_unverified
          --archive-max-size=500MB
          --archive-max-depth=100
          --archive-timeout=10m
          --concurrency=8
          --debug
          --no-update
        
    - name: Display Scan Results
      if: always()
      run: |
        echo "## 🔍 TruffleHog Maximum Coverage Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Repository**: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Total Commits Scanned**: $(git rev-list --count HEAD)" >> $GITHUB_STEP_SUMMARY
        echo "- **Configuration**: Maximum Coverage (All Detectors, No Verification)" >> $GITHUB_STEP_SUMMARY
        echo "- **Scan Status**: ${{ steps.trufflehog.outcome }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ steps.trufflehog.outcome }}" == "failure" ]]; then
          echo "### 🎯 SECRETS DETECTED!" >> $GITHUB_STEP_SUMMARY
          echo "TruffleHog found potential secrets with maximum coverage settings." >> $GITHUB_STEP_SUMMARY
          echo "This should now match or approach Gitleaks' finding count." >> $GITHUB_STEP_SUMMARY
        else
          echo "### ✅ No Secrets Detected" >> $GITHUB_STEP_SUMMARY
          echo "No secrets found with maximum coverage scan." >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Configuration Used" >> $GITHUB_STEP_SUMMARY
        echo "- \`--include-detectors=all\`: All 800+ detectors enabled" >> $GITHUB_STEP_SUMMARY
        echo "- \`--no-verification\`: No API verification (maximum sensitivity)" >> $GITHUB_STEP_SUMMARY
        echo "- \`--results=verified,unknown,unverified,filtered_unverified\`: All result types" >> $GITHUB_STEP_SUMMARY
        echo "- \`base=\"\" head=\"\"\`: Full repository scan (not incremental)" >> $GITHUB_STEP_SUMMARY
        
    - name: Comment on PR with Results
      if: failure() && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## 🔍 TruffleHog Maximum Coverage Results
            
            **🎯 SECRETS DETECTED with Maximum Coverage Scan**
            
            TruffleHog performed a comprehensive full-repository scan with maximum sensitivity settings and found potential secrets.
            
            **Scan Configuration:**
            - ✅ **Full Repository Scan**: Entire git history (like Gitleaks)
            - ✅ **All Detectors**: 800+ detection patterns enabled
            - ✅ **No Verification**: Maximum sensitivity, no API filtering
            - ✅ **All Result Types**: Verified, unknown, unverified, filtered
            
            **Repository Stats:**
            - **Total Commits Scanned**: $(git rev-list --count HEAD)
            - **Repository**: ${{ github.repository }}
            - **PR**: #${{ github.event.number }}
            
            This configuration should now detect secrets comparable to Gitleaks' findings.
            
            **Next Steps:**
            1. Review detailed findings in the Actions logs
            2. Compare with Gitleaks results
            3. Identify real vs false positive secrets
            4. Tune configuration for production use`
          })
          
    - name: Production Recommendation
      if: always()
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🎯 PRODUCTION RECOMMENDATIONS" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Current settings are for MAXIMUM COVERAGE testing.**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "For production use, consider:" >> $GITHUB_STEP_SUMMARY
        echo "- Remove \`--no-verification\` to reduce false positives" >> $GITHUB_STEP_SUMMARY
        echo "- Use \`--results=verified,unknown\` for higher confidence" >> $GITHUB_STEP_SUMMARY
        echo "- Use \`--only-verified\` for verified secrets only" >> $GITHUB_STEP_SUMMARY
        echo "- Add exclusion patterns for known false positives" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Example Production Config:**" >> $GITHUB_STEP_SUMMARY  
        echo "\`\`\`yaml" >> $GITHUB_STEP_SUMMARY
        echo "extra_args: --json --results=verified,unknown --filter-entropy=2.5" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
