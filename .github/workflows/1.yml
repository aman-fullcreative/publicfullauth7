name: TruffleHog Maximum-Coverage with Summary

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    - cron: '0 2 * * 1'

permissions:
  contents: read
  pull-requests: write
  security-events: write

jobs:
  trufflehog-max:
    name: TruffleHog Full Scan with Summary
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true

    - name: TruffleHog Maximum Coverage Scan
      id: trufflehog
      uses: trufflesecurity/trufflehog@main
      continue-on-error: true
      with:
        base: ""  # Full repository scan
        head: ""  # Full repository scan
        extra_args: >-
          --json
          --include-detectors=all
          --no-verification
          --archive-max-depth=20
          --debug

    # ✅ NEW: Parse and count total findings
    - name: Parse TruffleHog Results and Generate Summary
      id: parse_results
      if: always()
      run: |
        echo "🔍 TruffleHog Maximum Coverage Results" >> $GITHUB_STEP_SUMMARY
        echo "======================================" >> $GITHUB_STEP_SUMMARY
        
        # Check if results file exists and count findings
        if [[ -f "trufflehog_results.json" ]]; then
          # Count total findings
          total_count=$(cat trufflehog_results.json | jq length)
          
          # Count by detector type
          jdbc_count=$(cat trufflehog_results.json | jq '[.[] | select(.DetectorName=="JDBC")] | length')
          docker_count=$(cat trufflehog_results.json | jq '[.[] | select(.DetectorName=="Docker")] | length') 
          privatekey_count=$(cat trufflehog_results.json | jq '[.[] | select(.DetectorName=="PrivateKey")] | length')
          redis_count=$(cat trufflehog_results.json | jq '[.[] | select(.DetectorName=="Redis")] | length')
          other_count=$((total_count - jdbc_count - docker_count - privatekey_count - redis_count))
          
          # Count verified vs unverified
          verified_count=$(cat trufflehog_results.json | jq '[.[] | select(.Verified==true)] | length')
          unverified_count=$(cat trufflehog_results.json | jq '[.[] | select(.Verified==false)] | length')
          
          echo "📊 **TOTAL SECRETS FOUND: ${total_count}**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Breakdown by Secret Type:" >> $GITHUB_STEP_SUMMARY
          echo "| Secret Type | Count | Description |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------|-------|-------------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🔑 Private Key | ${privatekey_count} | RSA/EC certificates and keys |" >> $GITHUB_STEP_SUMMARY
          echo "| 🗄️ JDBC | ${jdbc_count} | Database connection strings |" >> $GITHUB_STEP_SUMMARY
          echo "| 🐳 Docker | ${docker_count} | Registry authentication |" >> $GITHUB_STEP_SUMMARY
          echo "| 📊 Redis | ${redis_count} | Cache connection strings |" >> $GITHUB_STEP_SUMMARY
          if [[ $other_count -gt 0 ]]; then
            echo "| 🔧 Other | ${other_count} | Additional secret types |" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Verification Status:" >> $GITHUB_STEP_SUMMARY
          echo "- **Verified Secrets**: ${verified_count}" >> $GITHUB_STEP_SUMMARY
          echo "- **Unverified Secrets**: ${unverified_count}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📁 Top 10 Files with Secrets:" >> $GITHUB_STEP_SUMMARY
          cat trufflehog_results.json | jq -r '.[] | .SourceMetadata.Data.Git.file + ":" + (.SourceMetadata.Data.Git.line | tostring) + " (" + .DetectorName + ")"' | sort | uniq -c | sort -nr | head -10 | while read count file; do
            echo "- **${count} secrets**: \`${file}\`" >> $GITHUB_STEP_SUMMARY
          done
          
          # Set outputs for other steps
          echo "total_findings=${total_count}" >> $GITHUB_OUTPUT
          echo "secrets_found=true" >> $GITHUB_OUTPUT
          
        else
          echo "❌ **No TruffleHog results file found**" >> $GITHUB_STEP_SUMMARY
          echo "The scan may have failed or produced no output." >> $GITHUB_STEP_SUMMARY
          echo "total_findings=0" >> $GITHUB_OUTPUT
          echo "secrets_found=false" >> $GITHUB_OUTPUT
        fi

    # Upload detailed results as artifact
    - name: Upload TruffleHog Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: trufflehog-max-results-with-summary
        path: |
          trufflehog_results.json
        retention-days: 30

    # Comment on PR with summary
    - name: Comment on PR with Secret Summary
      if: always() && github.event_name == 'pull_request' && steps.parse_results.outputs.secrets_found == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          const totalFindings = '${{ steps.parse_results.outputs.total_findings }}';
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## 🔍 TruffleHog Secret Scan Results
            
**Total Secrets Detected: ${totalFindings}**

⚠️ **Action Required**: Secrets were detected in this PR. 

📋 **Next Steps:**
1. Download the detailed report from the Actions artifacts
2. Review each detected secret for accuracy
3. Remove/rotate any real credentials immediately
4. Update exclusion patterns for false positives
5. Push fixes to this branch

> 💡 **Note**: This scan uses maximum coverage settings and may include test fixtures. Review carefully to distinguish between real secrets and test data.`
          })
